ARM GAS  /tmp/ccFQaBtv.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.code	16
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB47:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * Copyright (c) 2019 STMicroelectronics International N.V. 
  14:Src/main.c    ****   * All rights reserved.
  15:Src/main.c    ****   *
  16:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without 
  17:Src/main.c    ****   * modification, are permitted, provided that the following conditions are met:
  18:Src/main.c    ****   *
  19:Src/main.c    ****   * 1. Redistribution of source code must retain the above copyright notice, 
  20:Src/main.c    ****   *    this list of conditions and the following disclaimer.
  21:Src/main.c    ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  22:Src/main.c    ****   *    this list of conditions and the following disclaimer in the documentation
  23:Src/main.c    ****   *    and/or other materials provided with the distribution.
  24:Src/main.c    ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  25:Src/main.c    ****   *    contributors to this software may be used to endorse or promote products 
  26:Src/main.c    ****   *    derived from this software without specific written permission.
  27:Src/main.c    ****   * 4. This software, including modifications and/or derivative works of this 
  28:Src/main.c    ****   *    software, must execute solely and exclusively on microcontroller or
  29:Src/main.c    ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  30:Src/main.c    ****   * 5. Redistribution and use of this software other than as permitted under 
  31:Src/main.c    ****   *    this license is void and will automatically terminate your rights under 
  32:Src/main.c    ****   *    this license. 
  33:Src/main.c    ****   *
  34:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
ARM GAS  /tmp/ccFQaBtv.s 			page 2


  35:Src/main.c    ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  36:Src/main.c    ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  37:Src/main.c    ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  38:Src/main.c    ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  39:Src/main.c    ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  40:Src/main.c    ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  41:Src/main.c    ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  42:Src/main.c    ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  43:Src/main.c    ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  44:Src/main.c    ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  45:Src/main.c    ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  46:Src/main.c    ****   *
  47:Src/main.c    ****   ******************************************************************************
  48:Src/main.c    ****   */
  49:Src/main.c    **** /* USER CODE END Header */
  50:Src/main.c    **** 
  51:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  52:Src/main.c    **** #include "main.h"
  53:Src/main.c    **** 
  54:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  55:Src/main.c    **** /* USER CODE BEGIN Includes */
  56:Src/main.c    **** 
  57:Src/main.c    **** /* USER CODE END Includes */
  58:Src/main.c    **** 
  59:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  60:Src/main.c    **** /* USER CODE BEGIN PTD */
  61:Src/main.c    **** 
  62:Src/main.c    **** /* USER CODE END PTD */
  63:Src/main.c    **** 
  64:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  65:Src/main.c    **** /* USER CODE BEGIN PD */
  66:Src/main.c    **** 
  67:Src/main.c    **** /* USER CODE END PD */
  68:Src/main.c    **** 
  69:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  70:Src/main.c    **** /* USER CODE BEGIN PM */
  71:Src/main.c    **** 
  72:Src/main.c    **** /* USER CODE END PM */
  73:Src/main.c    **** 
  74:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  75:Src/main.c    **** TIM_HandleTypeDef htim3;
  76:Src/main.c    **** TIM_HandleTypeDef htim14;
  77:Src/main.c    **** TIM_HandleTypeDef htim16;
  78:Src/main.c    **** 
  79:Src/main.c    **** /* USER CODE BEGIN PV */
  80:Src/main.c    **** 
  81:Src/main.c    **** // Symbols 0 to 9. Each symbol is 4 pixels wide and 5 pixels high. Each row of 4 pixels is represen
  82:Src/main.c    **** const uint32_t symbols[] = { 0xeaaae, 0xe4464, 0xe2e8e, 0xe8e8e, 0x88eaa, 0xe8e2e, 0xeae2e, 0x8888e
  83:Src/main.c    **** 
  84:Src/main.c    **** uint8_t running = 0;
  85:Src/main.c    **** uint8_t digit1 = 0;
  86:Src/main.c    **** uint8_t digit2 = 0;
  87:Src/main.c    **** uint8_t digit3 = 0;
  88:Src/main.c    **** uint8_t digit4 = 0;
  89:Src/main.c    **** uint8_t minutes = 0;
  90:Src/main.c    **** uint8_t seconds = 0;
  91:Src/main.c    **** 
ARM GAS  /tmp/ccFQaBtv.s 			page 3


  92:Src/main.c    **** 
  93:Src/main.c    **** /* USER CODE END PV */
  94:Src/main.c    **** 
  95:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  96:Src/main.c    **** void SystemClock_Config(void);
  97:Src/main.c    **** static void MX_GPIO_Init(void);
  98:Src/main.c    **** static void MX_TIM3_Init(void);
  99:Src/main.c    **** static void MX_TIM14_Init(void);
 100:Src/main.c    **** static void MX_TIM16_Init(void);
 101:Src/main.c    **** /* USER CODE BEGIN PFP */
 102:Src/main.c    **** 
 103:Src/main.c    **** /* USER CODE END PFP */
 104:Src/main.c    **** 
 105:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
 106:Src/main.c    **** /* USER CODE BEGIN 0 */
 107:Src/main.c    **** 
 108:Src/main.c    **** void clear_leds() {
 109:Src/main.c    ****     //Set all floating
 110:Src/main.c    ****     GPIO_InitTypeDef GPIO_InitStruct = {0};
 111:Src/main.c    ****     GPIO_InitStruct.Pin = L0_Pin|L1_Pin|L2_Pin|L3_Pin 
 112:Src/main.c    ****                         |L4_Pin|L5_Pin|L6_Pin|L7_Pin 
 113:Src/main.c    ****                         |L8_Pin|L9_Pin;
 114:Src/main.c    ****     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 115:Src/main.c    ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 116:Src/main.c    **** }
 117:Src/main.c    **** 
 118:Src/main.c    **** void set_led(int x_pix, int y_pix) {
 119:Src/main.c    ****     GPIO_InitTypeDef GPIO_InitStruct = {0};
 120:Src/main.c    ****     clear_leds();
 121:Src/main.c    **** 
 122:Src/main.c    ****     // Convert from x,y coordinates to LED pin coordinates:
 123:Src/main.c    ****     if (x_pix >= 9) {
 124:Src/main.c    ****         y_pix += 5;
 125:Src/main.c    ****         x_pix -= 9;
 126:Src/main.c    ****     }
 127:Src/main.c    ****     if (x_pix >= y_pix)
 128:Src/main.c    ****       x_pix++;
 129:Src/main.c    ****     
 130:Src/main.c    ****     uint16_t x = (1<<x_pix);
 131:Src/main.c    ****     uint16_t y = (1<<y_pix);
 132:Src/main.c    **** 
 133:Src/main.c    ****     // Set the correct pins for these x,y coordinates:
 134:Src/main.c    ****     GPIO_InitStruct.Pin = y|x;
 135:Src/main.c    ****     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 136:Src/main.c    ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 137:Src/main.c    ****     
 138:Src/main.c    ****     HAL_GPIO_WritePin(GPIOA, x, GPIO_PIN_RESET);
 139:Src/main.c    ****     HAL_GPIO_WritePin(GPIOA, y, GPIO_PIN_SET);
 140:Src/main.c    ****  
 141:Src/main.c    **** }
 142:Src/main.c    **** 
 143:Src/main.c    **** 
 144:Src/main.c    **** void update_time() {
 145:Src/main.c    ****   // Update digits 1 and 2
 146:Src/main.c    ****   digit1 = minutes / 10;
 147:Src/main.c    ****   digit2 = minutes % 10;
 148:Src/main.c    ****       
ARM GAS  /tmp/ccFQaBtv.s 			page 4


 149:Src/main.c    ****   // Update digits 3 and 4
 150:Src/main.c    ****   digit3 = seconds / 10;
 151:Src/main.c    ****   digit4 = seconds % 10;
 152:Src/main.c    **** }
 153:Src/main.c    **** 
 154:Src/main.c    **** 
 155:Src/main.c    **** void second_tick()
 156:Src/main.c    **** {
 157:Src/main.c    ****     if (running) {
 158:Src/main.c    ****       if (seconds == 0 && minutes == 0){}
 159:Src/main.c    ****       else if (seconds == 0) {
 160:Src/main.c    ****         minutes--;
 161:Src/main.c    ****         seconds = 59;
 162:Src/main.c    ****       }
 163:Src/main.c    ****       else
 164:Src/main.c    ****         seconds--;
 165:Src/main.c    ****       
 166:Src/main.c    ****       update_time();
 167:Src/main.c    ****     }
 168:Src/main.c    **** }
 169:Src/main.c    **** 
 170:Src/main.c    **** void pixel() {
 171:Src/main.c    ****   
 172:Src/main.c    ****   static uint8_t x = 0;
 173:Src/main.c    ****   static uint8_t y = 0;
 174:Src/main.c    ****   uint32_t symbol = 0;
 175:Src/main.c    ****   
 176:Src/main.c    ****   // DIGIT 1
 177:Src/main.c    ****   if ( x == 8 ) {
 178:Src/main.c    ****     symbol = 0x00; // Nothing when x=8
 179:Src/main.c    ****   }
 180:Src/main.c    ****   else  if ( x == 9 ) {
 181:Src/main.c    ****     symbol = 0x0f0f0; // Colon when x=9
 182:Src/main.c    ****   }
 183:Src/main.c    ****   else if (x < 4)
 184:Src/main.c    ****   {
 185:Src/main.c    ****     symbol = symbols[digit1];
 186:Src/main.c    ****   }
 187:Src/main.c    ****   else if (x < 8) {
 188:Src/main.c    ****     symbol = symbols[digit2];
 189:Src/main.c    ****   }
 190:Src/main.c    ****   else if (x < 14) {
 191:Src/main.c    ****     symbol = symbols[digit3];
 192:Src/main.c    ****   }
 193:Src/main.c    ****   else {
 194:Src/main.c    ****     symbol = symbols[digit4];
 195:Src/main.c    ****   }
 196:Src/main.c    ****   
 197:Src/main.c    ****   // Convert from x/y position to bit position in the symbol variable 
 198:Src/main.c    ****   uint8_t position = (x%4) + 4*y;
 199:Src/main.c    ****   if (x > 9)
 200:Src/main.c    ****     position = ((x-2)%4) + 4*y;
 201:Src/main.c    ****     
 202:Src/main.c    ****   
 203:Src/main.c    ****   if ( (1 << position) & symbol )
 204:Src/main.c    ****     set_led(x, y);
 205:Src/main.c    ****   else
ARM GAS  /tmp/ccFQaBtv.s 			page 5


 206:Src/main.c    ****     clear_leds();
 207:Src/main.c    ****   
 208:Src/main.c    ****   // Go to next LED:
 209:Src/main.c    ****   x++;
 210:Src/main.c    ****   y++;
 211:Src/main.c    ****   
 212:Src/main.c    ****   // Reset to 0 when out of range:
 213:Src/main.c    ****   if(x > 17)
 214:Src/main.c    ****       x = 0;
 215:Src/main.c    ****   if(y > 4)
 216:Src/main.c    ****       y = 0;
 217:Src/main.c    **** }
 218:Src/main.c    **** 
 219:Src/main.c    **** 
 220:Src/main.c    **** /* USER CODE END 0 */
 221:Src/main.c    **** 
 222:Src/main.c    **** /**
 223:Src/main.c    ****   * @brief  The application entry point.
 224:Src/main.c    ****   * @retval int
 225:Src/main.c    ****   */
 226:Src/main.c    **** int main(void)
 227:Src/main.c    **** {
 228:Src/main.c    ****   /* USER CODE BEGIN 1 */
 229:Src/main.c    **** 
 230:Src/main.c    ****   /* USER CODE END 1 */
 231:Src/main.c    **** 
 232:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 233:Src/main.c    **** 
 234:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 235:Src/main.c    ****   HAL_Init();
 236:Src/main.c    **** 
 237:Src/main.c    ****   /* USER CODE BEGIN Init */
 238:Src/main.c    **** 
 239:Src/main.c    ****   /* USER CODE END Init */
 240:Src/main.c    **** 
 241:Src/main.c    ****   /* Configure the system clock */
 242:Src/main.c    ****   SystemClock_Config();
 243:Src/main.c    **** 
 244:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 245:Src/main.c    **** 
 246:Src/main.c    ****   /* USER CODE END SysInit */
 247:Src/main.c    **** 
 248:Src/main.c    ****   /* Initialize all configured peripherals */
 249:Src/main.c    ****   MX_GPIO_Init();
 250:Src/main.c    ****   MX_TIM3_Init();
 251:Src/main.c    ****   MX_TIM14_Init();
 252:Src/main.c    ****   MX_TIM16_Init();
 253:Src/main.c    ****   /* USER CODE BEGIN 2 */
 254:Src/main.c    **** 
 255:Src/main.c    ****   HAL_TIM_Base_Start_IT(&htim3);
 256:Src/main.c    ****   HAL_TIM_Base_Start_IT(&htim14);
 257:Src/main.c    ****   HAL_TIM_Base_Start_IT(&htim16);
 258:Src/main.c    ****   
 259:Src/main.c    ****   /* USER CODE END 2 */
 260:Src/main.c    **** 
 261:Src/main.c    ****   /* Infinite loop */
 262:Src/main.c    ****   /* USER CODE BEGIN WHILE */
ARM GAS  /tmp/ccFQaBtv.s 			page 6


 263:Src/main.c    ****   while (1)
 264:Src/main.c    ****   {
 265:Src/main.c    ****     /* USER CODE END WHILE */
 266:Src/main.c    **** 
 267:Src/main.c    ****     /* USER CODE BEGIN 3 */
 268:Src/main.c    ****     
 269:Src/main.c    ****     if (HAL_GPIO_ReadPin(GPIOB, SW1_Pin)==0)
 270:Src/main.c    ****     {
 271:Src/main.c    ****       if (running == 0)
 272:Src/main.c    ****         running = 1;
 273:Src/main.c    ****       else
 274:Src/main.c    ****         running = 0;
 275:Src/main.c    ****  
 276:Src/main.c    ****       HAL_Delay(10);
 277:Src/main.c    ****       while (HAL_GPIO_ReadPin(GPIOB, SW1_Pin)==0) {}
 278:Src/main.c    ****       HAL_Delay(10);
 279:Src/main.c    ****     }
 280:Src/main.c    ****   
 281:Src/main.c    ****     if (HAL_GPIO_ReadPin(GPIOB, SW2_Pin)==0)
 282:Src/main.c    ****     {
 283:Src/main.c    ****         // Increase minutes
 284:Src/main.c    ****         minutes++;
 285:Src/main.c    ****         if (minutes > 99)
 286:Src/main.c    ****           minutes = 0;
 287:Src/main.c    ****         
 288:Src/main.c    ****         update_time();
 289:Src/main.c    ****         
 290:Src/main.c    ****         HAL_Delay(10);
 291:Src/main.c    ****         while (HAL_GPIO_ReadPin(GPIOB, SW2_Pin)==0) {}
 292:Src/main.c    ****         HAL_Delay(10);
 293:Src/main.c    ****     }
 294:Src/main.c    ****     
 295:Src/main.c    ****     if (HAL_GPIO_ReadPin(GPIOB, SW3_Pin)==0)
 296:Src/main.c    ****     {
 297:Src/main.c    ****         // Increase seconds
 298:Src/main.c    ****         seconds++;
 299:Src/main.c    ****         if (seconds > 99)
 300:Src/main.c    ****           seconds = 0;
 301:Src/main.c    ****         
 302:Src/main.c    ****         update_time();
 303:Src/main.c    ****         
 304:Src/main.c    ****         HAL_Delay(10);
 305:Src/main.c    ****         while (HAL_GPIO_ReadPin(GPIOB, SW3_Pin)==0) {}
 306:Src/main.c    ****         HAL_Delay(10);
 307:Src/main.c    ****     }
 308:Src/main.c    ****   
 309:Src/main.c    ****   
 310:Src/main.c    ****     if (running) {
 311:Src/main.c    ****       if(seconds == 0 && minutes == 0) {
 312:Src/main.c    ****           allow_buzzer = 1;
 313:Src/main.c    ****       }              
 314:Src/main.c    ****     } 
 315:Src/main.c    ****     else {
 316:Src/main.c    ****       allow_buzzer = 0;
 317:Src/main.c    ****     }
 318:Src/main.c    ****     
 319:Src/main.c    ****   }
ARM GAS  /tmp/ccFQaBtv.s 			page 7


 320:Src/main.c    ****   /* USER CODE END 3 */
 321:Src/main.c    **** }
 322:Src/main.c    **** 
 323:Src/main.c    **** /**
 324:Src/main.c    ****   * @brief System Clock Configuration
 325:Src/main.c    ****   * @retval None
 326:Src/main.c    ****   */
 327:Src/main.c    **** void SystemClock_Config(void)
 328:Src/main.c    **** {
 329:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 330:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 331:Src/main.c    **** 
 332:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 333:Src/main.c    ****   */
 334:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 335:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 336:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 337:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 338:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 339:Src/main.c    ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 340:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 341:Src/main.c    ****   {
 342:Src/main.c    ****     Error_Handler();
 343:Src/main.c    ****   }
 344:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 345:Src/main.c    ****   */
 346:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 347:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 348:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 349:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 350:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 351:Src/main.c    **** 
 352:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 353:Src/main.c    ****   {
 354:Src/main.c    ****     Error_Handler();
 355:Src/main.c    ****   }
 356:Src/main.c    **** }
 357:Src/main.c    **** 
 358:Src/main.c    **** /**
 359:Src/main.c    ****   * @brief TIM3 Initialization Function
 360:Src/main.c    ****   * @param None
 361:Src/main.c    ****   * @retval None
 362:Src/main.c    ****   */
 363:Src/main.c    **** static void MX_TIM3_Init(void)
 364:Src/main.c    **** {
 365:Src/main.c    **** 
 366:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 0 */
 367:Src/main.c    **** 
 368:Src/main.c    ****   /* USER CODE END TIM3_Init 0 */
 369:Src/main.c    **** 
 370:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 371:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 372:Src/main.c    **** 
 373:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 1 */
 374:Src/main.c    **** 
 375:Src/main.c    ****   /* USER CODE END TIM3_Init 1 */
 376:Src/main.c    ****   htim3.Instance = TIM3;
ARM GAS  /tmp/ccFQaBtv.s 			page 8


 377:Src/main.c    ****   htim3.Init.Prescaler = 479;
 378:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 379:Src/main.c    ****   htim3.Init.Period = 10;
 380:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 381:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 382:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 383:Src/main.c    ****   {
 384:Src/main.c    ****     Error_Handler();
 385:Src/main.c    ****   }
 386:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 387:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 388:Src/main.c    ****   {
 389:Src/main.c    ****     Error_Handler();
 390:Src/main.c    ****   }
 391:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 392:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 393:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 394:Src/main.c    ****   {
 395:Src/main.c    ****     Error_Handler();
 396:Src/main.c    ****   }
 397:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 2 */
 398:Src/main.c    **** 
 399:Src/main.c    ****   /* USER CODE END TIM3_Init 2 */
 400:Src/main.c    **** 
 401:Src/main.c    **** }
 402:Src/main.c    **** 
 403:Src/main.c    **** /**
 404:Src/main.c    ****   * @brief TIM14 Initialization Function
 405:Src/main.c    ****   * @param None
 406:Src/main.c    ****   * @retval None
 407:Src/main.c    ****   */
 408:Src/main.c    **** static void MX_TIM14_Init(void)
 409:Src/main.c    **** {
 410:Src/main.c    **** 
 411:Src/main.c    ****   /* USER CODE BEGIN TIM14_Init 0 */
 412:Src/main.c    **** 
 413:Src/main.c    ****   /* USER CODE END TIM14_Init 0 */
 414:Src/main.c    **** 
 415:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 416:Src/main.c    **** 
 417:Src/main.c    ****   /* USER CODE BEGIN TIM14_Init 1 */
 418:Src/main.c    **** 
 419:Src/main.c    ****   /* USER CODE END TIM14_Init 1 */
 420:Src/main.c    ****   htim14.Instance = TIM14;
 421:Src/main.c    ****   htim14.Init.Prescaler = 4799;
 422:Src/main.c    ****   htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 423:Src/main.c    ****   htim14.Init.Period = 10;
 424:Src/main.c    ****   htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 425:Src/main.c    ****   htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 426:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 427:Src/main.c    ****   {
 428:Src/main.c    ****     Error_Handler();
 429:Src/main.c    ****   }
 430:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 431:Src/main.c    ****   {
 432:Src/main.c    ****     Error_Handler();
 433:Src/main.c    ****   }
ARM GAS  /tmp/ccFQaBtv.s 			page 9


 434:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 435:Src/main.c    ****   sConfigOC.Pulse = 0;
 436:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 437:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 438:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 439:Src/main.c    ****   {
 440:Src/main.c    ****     Error_Handler();
 441:Src/main.c    ****   }
 442:Src/main.c    ****   /* USER CODE BEGIN TIM14_Init 2 */
 443:Src/main.c    **** 
 444:Src/main.c    ****   /* USER CODE END TIM14_Init 2 */
 445:Src/main.c    **** 
 446:Src/main.c    **** }
 447:Src/main.c    **** 
 448:Src/main.c    **** /**
 449:Src/main.c    ****   * @brief TIM16 Initialization Function
 450:Src/main.c    ****   * @param None
 451:Src/main.c    ****   * @retval None
 452:Src/main.c    ****   */
 453:Src/main.c    **** static void MX_TIM16_Init(void)
 454:Src/main.c    **** {
 455:Src/main.c    **** 
 456:Src/main.c    ****   /* USER CODE BEGIN TIM16_Init 0 */
 457:Src/main.c    **** 
 458:Src/main.c    ****   /* USER CODE END TIM16_Init 0 */
 459:Src/main.c    **** 
 460:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 461:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 462:Src/main.c    **** 
 463:Src/main.c    ****   /* USER CODE BEGIN TIM16_Init 1 */
 464:Src/main.c    **** 
 465:Src/main.c    ****   /* USER CODE END TIM16_Init 1 */
 466:Src/main.c    ****   htim16.Instance = TIM16;
 467:Src/main.c    ****   htim16.Init.Prescaler = 47999;
 468:Src/main.c    ****   htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 469:Src/main.c    ****   htim16.Init.Period = 1000;
 470:Src/main.c    ****   htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 471:Src/main.c    ****   htim16.Init.RepetitionCounter = 0;
 472:Src/main.c    ****   htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 473:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 474:Src/main.c    ****   {
 475:Src/main.c    ****     Error_Handler();
 476:Src/main.c    ****   }
 477:Src/main.c    ****   if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 478:Src/main.c    ****   {
 479:Src/main.c    ****     Error_Handler();
 480:Src/main.c    ****   }
 481:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_TIMING;
 482:Src/main.c    ****   sConfigOC.Pulse = 0;
 483:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 484:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 485:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 486:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 487:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 488:Src/main.c    ****   if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 489:Src/main.c    ****   {
 490:Src/main.c    ****     Error_Handler();
ARM GAS  /tmp/ccFQaBtv.s 			page 10


 491:Src/main.c    ****   }
 492:Src/main.c    ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 493:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 494:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 495:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 496:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 497:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 498:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 499:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 500:Src/main.c    ****   {
 501:Src/main.c    ****     Error_Handler();
 502:Src/main.c    ****   }
 503:Src/main.c    ****   /* USER CODE BEGIN TIM16_Init 2 */
 504:Src/main.c    **** 
 505:Src/main.c    ****   /* USER CODE END TIM16_Init 2 */
 506:Src/main.c    **** 
 507:Src/main.c    **** }
 508:Src/main.c    **** 
 509:Src/main.c    **** /**
 510:Src/main.c    ****   * @brief GPIO Initialization Function
 511:Src/main.c    ****   * @param None
 512:Src/main.c    ****   * @retval None
 513:Src/main.c    ****   */
 514:Src/main.c    **** static void MX_GPIO_Init(void)
 515:Src/main.c    **** {
  25              		.loc 1 515 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 32
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 20
  32              		.cfi_offset 4, -20
  33              		.cfi_offset 5, -16
  34              		.cfi_offset 6, -12
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 89B0     		sub	sp, sp, #36
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 56
 516:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  40              		.loc 1 516 0
  41 0004 1422     		movs	r2, #20
  42 0006 0021     		movs	r1, #0
  43 0008 03A8     		add	r0, sp, #12
  44 000a FFF7FEFF 		bl	memset
  45              	.LVL0:
  46              	.LBB2:
 517:Src/main.c    **** 
 518:Src/main.c    ****   /* GPIO Ports Clock Enable */
 519:Src/main.c    ****   __HAL_RCC_GPIOF_CLK_ENABLE();
  47              		.loc 1 519 0
  48 000e 244B     		ldr	r3, .L2
  49 0010 5969     		ldr	r1, [r3, #20]
  50 0012 8020     		movs	r0, #128
  51 0014 C003     		lsls	r0, r0, #15
  52 0016 0143     		orrs	r1, r0
ARM GAS  /tmp/ccFQaBtv.s 			page 11


  53 0018 5961     		str	r1, [r3, #20]
  54 001a 5A69     		ldr	r2, [r3, #20]
  55 001c 0240     		ands	r2, r0
  56 001e 0092     		str	r2, [sp]
  57 0020 009A     		ldr	r2, [sp]
  58              	.LBE2:
  59              	.LBB3:
 520:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  60              		.loc 1 520 0
  61 0022 5969     		ldr	r1, [r3, #20]
  62 0024 8020     		movs	r0, #128
  63 0026 8002     		lsls	r0, r0, #10
  64 0028 0143     		orrs	r1, r0
  65 002a 5961     		str	r1, [r3, #20]
  66 002c 5A69     		ldr	r2, [r3, #20]
  67 002e 0240     		ands	r2, r0
  68 0030 0192     		str	r2, [sp, #4]
  69 0032 019A     		ldr	r2, [sp, #4]
  70              	.LBE3:
  71              	.LBB4:
 521:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  72              		.loc 1 521 0
  73 0034 5A69     		ldr	r2, [r3, #20]
  74 0036 8021     		movs	r1, #128
  75 0038 C902     		lsls	r1, r1, #11
  76 003a 0A43     		orrs	r2, r1
  77 003c 5A61     		str	r2, [r3, #20]
  78 003e 5B69     		ldr	r3, [r3, #20]
  79 0040 0B40     		ands	r3, r1
  80 0042 0293     		str	r3, [sp, #8]
  81 0044 029B     		ldr	r3, [sp, #8]
  82              	.LBE4:
 522:Src/main.c    **** 
 523:Src/main.c    ****   /*Configure GPIO pin Output Level */
 524:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, L0_Pin|L1_Pin|L2_Pin|L3_Pin 
  83              		.loc 1 524 0
  84 0046 174C     		ldr	r4, .L2+4
  85 0048 0022     		movs	r2, #0
  86 004a 2100     		movs	r1, r4
  87 004c 9020     		movs	r0, #144
  88 004e C005     		lsls	r0, r0, #23
  89 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
  90              	.LVL1:
 525:Src/main.c    ****                           |L4_Pin|L5_Pin|L6_Pin|L7_Pin 
 526:Src/main.c    ****                           |L8_Pin|L9_Pin, GPIO_PIN_RESET);
 527:Src/main.c    **** 
 528:Src/main.c    ****   /*Configure GPIO pin Output Level */
 529:Src/main.c    ****   HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
  91              		.loc 1 529 0
  92 0054 8027     		movs	r7, #128
  93 0056 7F01     		lsls	r7, r7, #5
  94 0058 134D     		ldr	r5, .L2+8
  95 005a 0022     		movs	r2, #0
  96 005c 3900     		movs	r1, r7
  97 005e 2800     		movs	r0, r5
  98 0060 FFF7FEFF 		bl	HAL_GPIO_WritePin
  99              	.LVL2:
ARM GAS  /tmp/ccFQaBtv.s 			page 12


 530:Src/main.c    **** 
 531:Src/main.c    ****   /*Configure GPIO pins : L0_Pin L1_Pin L2_Pin L3_Pin 
 532:Src/main.c    ****                            L4_Pin L5_Pin L6_Pin L7_Pin 
 533:Src/main.c    ****                            L8_Pin L9_Pin */
 534:Src/main.c    ****   GPIO_InitStruct.Pin = L0_Pin|L1_Pin|L2_Pin|L3_Pin 
 100              		.loc 1 534 0
 101 0064 0394     		str	r4, [sp, #12]
 535:Src/main.c    ****                           |L4_Pin|L5_Pin|L6_Pin|L7_Pin 
 536:Src/main.c    ****                           |L8_Pin|L9_Pin;
 537:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 102              		.loc 1 537 0
 103 0066 0126     		movs	r6, #1
 104 0068 0496     		str	r6, [sp, #16]
 538:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 105              		.loc 1 538 0
 106 006a 0024     		movs	r4, #0
 107 006c 0594     		str	r4, [sp, #20]
 539:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 108              		.loc 1 539 0
 109 006e 0694     		str	r4, [sp, #24]
 540:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 110              		.loc 1 540 0
 111 0070 03A9     		add	r1, sp, #12
 112 0072 9020     		movs	r0, #144
 113 0074 C005     		lsls	r0, r0, #23
 114 0076 FFF7FEFF 		bl	HAL_GPIO_Init
 115              	.LVL3:
 541:Src/main.c    **** 
 542:Src/main.c    ****   /*Configure GPIO pins : SW2_Pin SW1_Pin SW3_Pin */
 543:Src/main.c    ****   GPIO_InitStruct.Pin = SW2_Pin|SW1_Pin|SW3_Pin;
 116              		.loc 1 543 0
 117 007a 0723     		movs	r3, #7
 118 007c 0393     		str	r3, [sp, #12]
 544:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 119              		.loc 1 544 0
 120 007e 0494     		str	r4, [sp, #16]
 545:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 121              		.loc 1 545 0
 122 0080 0596     		str	r6, [sp, #20]
 546:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 123              		.loc 1 546 0
 124 0082 03A9     		add	r1, sp, #12
 125 0084 2800     		movs	r0, r5
 126 0086 FFF7FEFF 		bl	HAL_GPIO_Init
 127              	.LVL4:
 547:Src/main.c    **** 
 548:Src/main.c    ****   /*Configure GPIO pin : BUZZER_Pin */
 549:Src/main.c    ****   GPIO_InitStruct.Pin = BUZZER_Pin;
 128              		.loc 1 549 0
 129 008a 0397     		str	r7, [sp, #12]
 550:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 130              		.loc 1 550 0
 131 008c 0496     		str	r6, [sp, #16]
 551:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 132              		.loc 1 551 0
 133 008e 0594     		str	r4, [sp, #20]
 552:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
ARM GAS  /tmp/ccFQaBtv.s 			page 13


 134              		.loc 1 552 0
 135 0090 0694     		str	r4, [sp, #24]
 553:Src/main.c    ****   HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 136              		.loc 1 553 0
 137 0092 03A9     		add	r1, sp, #12
 138 0094 2800     		movs	r0, r5
 139 0096 FFF7FEFF 		bl	HAL_GPIO_Init
 140              	.LVL5:
 554:Src/main.c    **** 
 555:Src/main.c    **** }
 141              		.loc 1 555 0
 142 009a 09B0     		add	sp, sp, #36
 143              		@ sp needed
 144 009c F0BD     		pop	{r4, r5, r6, r7, pc}
 145              	.L3:
 146 009e C046     		.align	2
 147              	.L2:
 148 00a0 00100240 		.word	1073876992
 149 00a4 FF030000 		.word	1023
 150 00a8 00040048 		.word	1207960576
 151              		.cfi_endproc
 152              	.LFE47:
 154              		.section	.text.MX_TIM3_Init,"ax",%progbits
 155              		.align	1
 156              		.syntax unified
 157              		.code	16
 158              		.thumb_func
 159              		.fpu softvfp
 161              	MX_TIM3_Init:
 162              	.LFB44:
 364:Src/main.c    **** 
 163              		.loc 1 364 0
 164              		.cfi_startproc
 165              		@ args = 0, pretend = 0, frame = 24
 166              		@ frame_needed = 0, uses_anonymous_args = 0
 167 0000 30B5     		push	{r4, r5, lr}
 168              	.LCFI2:
 169              		.cfi_def_cfa_offset 12
 170              		.cfi_offset 4, -12
 171              		.cfi_offset 5, -8
 172              		.cfi_offset 14, -4
 173 0002 87B0     		sub	sp, sp, #28
 174              	.LCFI3:
 175              		.cfi_def_cfa_offset 40
 370:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 176              		.loc 1 370 0
 177 0004 1022     		movs	r2, #16
 178 0006 0021     		movs	r1, #0
 179 0008 02A8     		add	r0, sp, #8
 180 000a FFF7FEFF 		bl	memset
 181              	.LVL6:
 371:Src/main.c    **** 
 182              		.loc 1 371 0
 183 000e 0822     		movs	r2, #8
 184 0010 0021     		movs	r1, #0
 185 0012 6846     		mov	r0, sp
 186 0014 FFF7FEFF 		bl	memset
ARM GAS  /tmp/ccFQaBtv.s 			page 14


 187              	.LVL7:
 376:Src/main.c    ****   htim3.Init.Prescaler = 479;
 188              		.loc 1 376 0
 189 0018 0F4C     		ldr	r4, .L5
 190 001a 104B     		ldr	r3, .L5+4
 191 001c 2360     		str	r3, [r4]
 377:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 192              		.loc 1 377 0
 193 001e E023     		movs	r3, #224
 194 0020 FF33     		adds	r3, r3, #255
 195 0022 6360     		str	r3, [r4, #4]
 378:Src/main.c    ****   htim3.Init.Period = 10;
 196              		.loc 1 378 0
 197 0024 0025     		movs	r5, #0
 198 0026 A560     		str	r5, [r4, #8]
 379:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 199              		.loc 1 379 0
 200 0028 D63B     		subs	r3, r3, #214
 201 002a FF3B     		subs	r3, r3, #255
 202 002c E360     		str	r3, [r4, #12]
 380:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 203              		.loc 1 380 0
 204 002e 2561     		str	r5, [r4, #16]
 381:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 205              		.loc 1 381 0
 206 0030 A561     		str	r5, [r4, #24]
 382:Src/main.c    ****   {
 207              		.loc 1 382 0
 208 0032 2000     		movs	r0, r4
 209 0034 FFF7FEFF 		bl	HAL_TIM_Base_Init
 210              	.LVL8:
 386:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 211              		.loc 1 386 0
 212 0038 8023     		movs	r3, #128
 213 003a 5B01     		lsls	r3, r3, #5
 214 003c 0293     		str	r3, [sp, #8]
 387:Src/main.c    ****   {
 215              		.loc 1 387 0
 216 003e 02A9     		add	r1, sp, #8
 217 0040 2000     		movs	r0, r4
 218 0042 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 219              	.LVL9:
 391:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 220              		.loc 1 391 0
 221 0046 0095     		str	r5, [sp]
 392:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 222              		.loc 1 392 0
 223 0048 0195     		str	r5, [sp, #4]
 393:Src/main.c    ****   {
 224              		.loc 1 393 0
 225 004a 6946     		mov	r1, sp
 226 004c 2000     		movs	r0, r4
 227 004e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 228              	.LVL10:
 401:Src/main.c    **** 
 229              		.loc 1 401 0
 230 0052 07B0     		add	sp, sp, #28
ARM GAS  /tmp/ccFQaBtv.s 			page 15


 231              		@ sp needed
 232 0054 30BD     		pop	{r4, r5, pc}
 233              	.L6:
 234 0056 C046     		.align	2
 235              	.L5:
 236 0058 00000000 		.word	htim3
 237 005c 00040040 		.word	1073742848
 238              		.cfi_endproc
 239              	.LFE44:
 241              		.section	.text.MX_TIM14_Init,"ax",%progbits
 242              		.align	1
 243              		.syntax unified
 244              		.code	16
 245              		.thumb_func
 246              		.fpu softvfp
 248              	MX_TIM14_Init:
 249              	.LFB45:
 409:Src/main.c    **** 
 250              		.loc 1 409 0
 251              		.cfi_startproc
 252              		@ args = 0, pretend = 0, frame = 32
 253              		@ frame_needed = 0, uses_anonymous_args = 0
 254 0000 30B5     		push	{r4, r5, lr}
 255              	.LCFI4:
 256              		.cfi_def_cfa_offset 12
 257              		.cfi_offset 4, -12
 258              		.cfi_offset 5, -8
 259              		.cfi_offset 14, -4
 260 0002 89B0     		sub	sp, sp, #36
 261              	.LCFI5:
 262              		.cfi_def_cfa_offset 48
 415:Src/main.c    **** 
 263              		.loc 1 415 0
 264 0004 1C22     		movs	r2, #28
 265 0006 0021     		movs	r1, #0
 266 0008 01A8     		add	r0, sp, #4
 267 000a FFF7FEFF 		bl	memset
 268              	.LVL11:
 420:Src/main.c    ****   htim14.Init.Prescaler = 4799;
 269              		.loc 1 420 0
 270 000e 0E4C     		ldr	r4, .L8
 271 0010 0E4B     		ldr	r3, .L8+4
 272 0012 2360     		str	r3, [r4]
 421:Src/main.c    ****   htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 273              		.loc 1 421 0
 274 0014 0E4B     		ldr	r3, .L8+8
 275 0016 6360     		str	r3, [r4, #4]
 422:Src/main.c    ****   htim14.Init.Period = 10;
 276              		.loc 1 422 0
 277 0018 0025     		movs	r5, #0
 278 001a A560     		str	r5, [r4, #8]
 423:Src/main.c    ****   htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 279              		.loc 1 423 0
 280 001c 0A23     		movs	r3, #10
 281 001e E360     		str	r3, [r4, #12]
 424:Src/main.c    ****   htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 282              		.loc 1 424 0
ARM GAS  /tmp/ccFQaBtv.s 			page 16


 283 0020 2561     		str	r5, [r4, #16]
 425:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 284              		.loc 1 425 0
 285 0022 A561     		str	r5, [r4, #24]
 426:Src/main.c    ****   {
 286              		.loc 1 426 0
 287 0024 2000     		movs	r0, r4
 288 0026 FFF7FEFF 		bl	HAL_TIM_Base_Init
 289              	.LVL12:
 430:Src/main.c    ****   {
 290              		.loc 1 430 0
 291 002a 2000     		movs	r0, r4
 292 002c FFF7FEFF 		bl	HAL_TIM_PWM_Init
 293              	.LVL13:
 434:Src/main.c    ****   sConfigOC.Pulse = 0;
 294              		.loc 1 434 0
 295 0030 6023     		movs	r3, #96
 296 0032 0193     		str	r3, [sp, #4]
 435:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 297              		.loc 1 435 0
 298 0034 0295     		str	r5, [sp, #8]
 436:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 299              		.loc 1 436 0
 300 0036 0395     		str	r5, [sp, #12]
 437:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 301              		.loc 1 437 0
 302 0038 0595     		str	r5, [sp, #20]
 438:Src/main.c    ****   {
 303              		.loc 1 438 0
 304 003a 0022     		movs	r2, #0
 305 003c 01A9     		add	r1, sp, #4
 306 003e 2000     		movs	r0, r4
 307 0040 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 308              	.LVL14:
 446:Src/main.c    **** 
 309              		.loc 1 446 0
 310 0044 09B0     		add	sp, sp, #36
 311              		@ sp needed
 312 0046 30BD     		pop	{r4, r5, pc}
 313              	.L9:
 314              		.align	2
 315              	.L8:
 316 0048 00000000 		.word	htim14
 317 004c 00200040 		.word	1073750016
 318 0050 BF120000 		.word	4799
 319              		.cfi_endproc
 320              	.LFE45:
 322              		.section	.text.MX_TIM16_Init,"ax",%progbits
 323              		.align	1
 324              		.syntax unified
 325              		.code	16
 326              		.thumb_func
 327              		.fpu softvfp
 329              	MX_TIM16_Init:
 330              	.LFB46:
 454:Src/main.c    **** 
 331              		.loc 1 454 0
ARM GAS  /tmp/ccFQaBtv.s 			page 17


 332              		.cfi_startproc
 333              		@ args = 0, pretend = 0, frame = 56
 334              		@ frame_needed = 0, uses_anonymous_args = 0
 335 0000 30B5     		push	{r4, r5, lr}
 336              	.LCFI6:
 337              		.cfi_def_cfa_offset 12
 338              		.cfi_offset 4, -12
 339              		.cfi_offset 5, -8
 340              		.cfi_offset 14, -4
 341 0002 8FB0     		sub	sp, sp, #60
 342              	.LCFI7:
 343              		.cfi_def_cfa_offset 72
 460:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 344              		.loc 1 460 0
 345 0004 1C22     		movs	r2, #28
 346 0006 0021     		movs	r1, #0
 347 0008 07A8     		add	r0, sp, #28
 348 000a FFF7FEFF 		bl	memset
 349              	.LVL15:
 461:Src/main.c    **** 
 350              		.loc 1 461 0
 351 000e 1C22     		movs	r2, #28
 352 0010 0021     		movs	r1, #0
 353 0012 6846     		mov	r0, sp
 354 0014 FFF7FEFF 		bl	memset
 355              	.LVL16:
 466:Src/main.c    ****   htim16.Init.Prescaler = 47999;
 356              		.loc 1 466 0
 357 0018 164D     		ldr	r5, .L11
 358 001a 174B     		ldr	r3, .L11+4
 359 001c 2B60     		str	r3, [r5]
 467:Src/main.c    ****   htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 360              		.loc 1 467 0
 361 001e 174B     		ldr	r3, .L11+8
 362 0020 6B60     		str	r3, [r5, #4]
 468:Src/main.c    ****   htim16.Init.Period = 1000;
 363              		.loc 1 468 0
 364 0022 0024     		movs	r4, #0
 365 0024 AC60     		str	r4, [r5, #8]
 469:Src/main.c    ****   htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 366              		.loc 1 469 0
 367 0026 FA23     		movs	r3, #250
 368 0028 9B00     		lsls	r3, r3, #2
 369 002a EB60     		str	r3, [r5, #12]
 470:Src/main.c    ****   htim16.Init.RepetitionCounter = 0;
 370              		.loc 1 470 0
 371 002c 2C61     		str	r4, [r5, #16]
 471:Src/main.c    ****   htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 372              		.loc 1 471 0
 373 002e 6C61     		str	r4, [r5, #20]
 472:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 374              		.loc 1 472 0
 375 0030 AC61     		str	r4, [r5, #24]
 473:Src/main.c    ****   {
 376              		.loc 1 473 0
 377 0032 2800     		movs	r0, r5
 378 0034 FFF7FEFF 		bl	HAL_TIM_Base_Init
ARM GAS  /tmp/ccFQaBtv.s 			page 18


 379              	.LVL17:
 477:Src/main.c    ****   {
 380              		.loc 1 477 0
 381 0038 2800     		movs	r0, r5
 382 003a FFF7FEFF 		bl	HAL_TIM_OC_Init
 383              	.LVL18:
 481:Src/main.c    ****   sConfigOC.Pulse = 0;
 384              		.loc 1 481 0
 385 003e 0794     		str	r4, [sp, #28]
 482:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 386              		.loc 1 482 0
 387 0040 0894     		str	r4, [sp, #32]
 483:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 388              		.loc 1 483 0
 389 0042 0994     		str	r4, [sp, #36]
 484:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 390              		.loc 1 484 0
 391 0044 0A94     		str	r4, [sp, #40]
 485:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 392              		.loc 1 485 0
 393 0046 0B94     		str	r4, [sp, #44]
 486:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 394              		.loc 1 486 0
 395 0048 0C94     		str	r4, [sp, #48]
 487:Src/main.c    ****   if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 396              		.loc 1 487 0
 397 004a 0D94     		str	r4, [sp, #52]
 488:Src/main.c    ****   {
 398              		.loc 1 488 0
 399 004c 0022     		movs	r2, #0
 400 004e 07A9     		add	r1, sp, #28
 401 0050 2800     		movs	r0, r5
 402 0052 FFF7FEFF 		bl	HAL_TIM_OC_ConfigChannel
 403              	.LVL19:
 492:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 404              		.loc 1 492 0
 405 0056 0094     		str	r4, [sp]
 493:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 406              		.loc 1 493 0
 407 0058 0194     		str	r4, [sp, #4]
 494:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 408              		.loc 1 494 0
 409 005a 0294     		str	r4, [sp, #8]
 495:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 410              		.loc 1 495 0
 411 005c 0394     		str	r4, [sp, #12]
 496:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 412              		.loc 1 496 0
 413 005e 0494     		str	r4, [sp, #16]
 497:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 414              		.loc 1 497 0
 415 0060 8023     		movs	r3, #128
 416 0062 9B01     		lsls	r3, r3, #6
 417 0064 0593     		str	r3, [sp, #20]
 498:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 418              		.loc 1 498 0
 419 0066 0694     		str	r4, [sp, #24]
ARM GAS  /tmp/ccFQaBtv.s 			page 19


 499:Src/main.c    ****   {
 420              		.loc 1 499 0
 421 0068 6946     		mov	r1, sp
 422 006a 2800     		movs	r0, r5
 423 006c FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 424              	.LVL20:
 507:Src/main.c    **** 
 425              		.loc 1 507 0
 426 0070 0FB0     		add	sp, sp, #60
 427              		@ sp needed
 428 0072 30BD     		pop	{r4, r5, pc}
 429              	.L12:
 430              		.align	2
 431              	.L11:
 432 0074 00000000 		.word	htim16
 433 0078 00440140 		.word	1073824768
 434 007c 7FBB0000 		.word	47999
 435              		.cfi_endproc
 436              	.LFE46:
 438              		.section	.text.clear_leds,"ax",%progbits
 439              		.align	1
 440              		.global	clear_leds
 441              		.syntax unified
 442              		.code	16
 443              		.thumb_func
 444              		.fpu softvfp
 446              	clear_leds:
 447              	.LFB37:
 108:Src/main.c    ****     //Set all floating
 448              		.loc 1 108 0
 449              		.cfi_startproc
 450              		@ args = 0, pretend = 0, frame = 24
 451              		@ frame_needed = 0, uses_anonymous_args = 0
 452 0000 00B5     		push	{lr}
 453              	.LCFI8:
 454              		.cfi_def_cfa_offset 4
 455              		.cfi_offset 14, -4
 456 0002 87B0     		sub	sp, sp, #28
 457              	.LCFI9:
 458              		.cfi_def_cfa_offset 32
 110:Src/main.c    ****     GPIO_InitStruct.Pin = L0_Pin|L1_Pin|L2_Pin|L3_Pin 
 459              		.loc 1 110 0
 460 0004 1022     		movs	r2, #16
 461 0006 0021     		movs	r1, #0
 462 0008 02A8     		add	r0, sp, #8
 463 000a FFF7FEFF 		bl	memset
 464              	.LVL21:
 111:Src/main.c    ****                         |L4_Pin|L5_Pin|L6_Pin|L7_Pin 
 465              		.loc 1 111 0
 466 000e 044B     		ldr	r3, .L14
 467 0010 0193     		str	r3, [sp, #4]
 115:Src/main.c    **** }
 468              		.loc 1 115 0
 469 0012 9020     		movs	r0, #144
 470 0014 01A9     		add	r1, sp, #4
 471 0016 C005     		lsls	r0, r0, #23
 472 0018 FFF7FEFF 		bl	HAL_GPIO_Init
ARM GAS  /tmp/ccFQaBtv.s 			page 20


 473              	.LVL22:
 116:Src/main.c    **** 
 474              		.loc 1 116 0
 475 001c 07B0     		add	sp, sp, #28
 476              		@ sp needed
 477 001e 00BD     		pop	{pc}
 478              	.L15:
 479              		.align	2
 480              	.L14:
 481 0020 FF030000 		.word	1023
 482              		.cfi_endproc
 483              	.LFE37:
 485              		.section	.text.set_led,"ax",%progbits
 486              		.align	1
 487              		.global	set_led
 488              		.syntax unified
 489              		.code	16
 490              		.thumb_func
 491              		.fpu softvfp
 493              	set_led:
 494              	.LFB38:
 118:Src/main.c    ****     GPIO_InitTypeDef GPIO_InitStruct = {0};
 495              		.loc 1 118 0
 496              		.cfi_startproc
 497              		@ args = 0, pretend = 0, frame = 24
 498              		@ frame_needed = 0, uses_anonymous_args = 0
 499              	.LVL23:
 500 0000 70B5     		push	{r4, r5, r6, lr}
 501              	.LCFI10:
 502              		.cfi_def_cfa_offset 16
 503              		.cfi_offset 4, -16
 504              		.cfi_offset 5, -12
 505              		.cfi_offset 6, -8
 506              		.cfi_offset 14, -4
 507 0002 86B0     		sub	sp, sp, #24
 508              	.LCFI11:
 509              		.cfi_def_cfa_offset 40
 510 0004 0400     		movs	r4, r0
 511 0006 0E00     		movs	r6, r1
 119:Src/main.c    ****     clear_leds();
 512              		.loc 1 119 0
 513 0008 1422     		movs	r2, #20
 514 000a 0021     		movs	r1, #0
 515              	.LVL24:
 516 000c 01A8     		add	r0, sp, #4
 517              	.LVL25:
 518 000e FFF7FEFF 		bl	memset
 519              	.LVL26:
 120:Src/main.c    **** 
 520              		.loc 1 120 0
 521 0012 FFF7FEFF 		bl	clear_leds
 522              	.LVL27:
 123:Src/main.c    ****         y_pix += 5;
 523              		.loc 1 123 0
 524 0016 082C     		cmp	r4, #8
 525 0018 01DD     		ble	.L17
 124:Src/main.c    ****         x_pix -= 9;
ARM GAS  /tmp/ccFQaBtv.s 			page 21


 526              		.loc 1 124 0
 527 001a 0536     		adds	r6, r6, #5
 528              	.LVL28:
 125:Src/main.c    ****     }
 529              		.loc 1 125 0
 530 001c 093C     		subs	r4, r4, #9
 531              	.LVL29:
 532              	.L17:
 127:Src/main.c    ****       x_pix++;
 533              		.loc 1 127 0
 534 001e B442     		cmp	r4, r6
 535 0020 00DB     		blt	.L18
 128:Src/main.c    ****     
 536              		.loc 1 128 0
 537 0022 0134     		adds	r4, r4, #1
 538              	.LVL30:
 539              	.L18:
 130:Src/main.c    ****     uint16_t y = (1<<y_pix);
 540              		.loc 1 130 0
 541 0024 0123     		movs	r3, #1
 542 0026 1D00     		movs	r5, r3
 543 0028 A540     		lsls	r5, r5, r4
 544 002a ADB2     		uxth	r5, r5
 545              	.LVL31:
 131:Src/main.c    **** 
 546              		.loc 1 131 0
 547 002c 1C00     		movs	r4, r3
 548              	.LVL32:
 549 002e B440     		lsls	r4, r4, r6
 550 0030 A4B2     		uxth	r4, r4
 551              	.LVL33:
 134:Src/main.c    ****     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 552              		.loc 1 134 0
 553 0032 2A00     		movs	r2, r5
 554 0034 2243     		orrs	r2, r4
 555 0036 0192     		str	r2, [sp, #4]
 135:Src/main.c    ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 556              		.loc 1 135 0
 557 0038 0293     		str	r3, [sp, #8]
 136:Src/main.c    ****     
 558              		.loc 1 136 0
 559 003a 9026     		movs	r6, #144
 560              	.LVL34:
 561 003c F605     		lsls	r6, r6, #23
 562 003e 01A9     		add	r1, sp, #4
 563 0040 3000     		movs	r0, r6
 564 0042 FFF7FEFF 		bl	HAL_GPIO_Init
 565              	.LVL35:
 138:Src/main.c    ****     HAL_GPIO_WritePin(GPIOA, y, GPIO_PIN_SET);
 566              		.loc 1 138 0
 567 0046 0022     		movs	r2, #0
 568 0048 2900     		movs	r1, r5
 569 004a 3000     		movs	r0, r6
 570 004c FFF7FEFF 		bl	HAL_GPIO_WritePin
 571              	.LVL36:
 139:Src/main.c    ****  
 572              		.loc 1 139 0
ARM GAS  /tmp/ccFQaBtv.s 			page 22


 573 0050 0122     		movs	r2, #1
 574 0052 2100     		movs	r1, r4
 575 0054 3000     		movs	r0, r6
 576 0056 FFF7FEFF 		bl	HAL_GPIO_WritePin
 577              	.LVL37:
 141:Src/main.c    **** 
 578              		.loc 1 141 0
 579 005a 06B0     		add	sp, sp, #24
 580              		@ sp needed
 581              	.LVL38:
 582              	.LVL39:
 583 005c 70BD     		pop	{r4, r5, r6, pc}
 584              		.cfi_endproc
 585              	.LFE38:
 587              		.global	__aeabi_uidiv
 588              		.global	__aeabi_uidivmod
 589              		.section	.text.update_time,"ax",%progbits
 590              		.align	1
 591              		.global	update_time
 592              		.syntax unified
 593              		.code	16
 594              		.thumb_func
 595              		.fpu softvfp
 597              	update_time:
 598              	.LFB39:
 144:Src/main.c    ****   // Update digits 1 and 2
 599              		.loc 1 144 0
 600              		.cfi_startproc
 601              		@ args = 0, pretend = 0, frame = 0
 602              		@ frame_needed = 0, uses_anonymous_args = 0
 603 0000 10B5     		push	{r4, lr}
 604              	.LCFI12:
 605              		.cfi_def_cfa_offset 8
 606              		.cfi_offset 4, -8
 607              		.cfi_offset 14, -4
 146:Src/main.c    ****   digit2 = minutes % 10;
 608              		.loc 1 146 0
 609 0002 0E4B     		ldr	r3, .L20
 610 0004 1C78     		ldrb	r4, [r3]
 611 0006 0A21     		movs	r1, #10
 612 0008 2000     		movs	r0, r4
 613 000a FFF7FEFF 		bl	__aeabi_uidiv
 614              	.LVL40:
 615 000e 0C4B     		ldr	r3, .L20+4
 616 0010 1870     		strb	r0, [r3]
 147:Src/main.c    ****       
 617              		.loc 1 147 0
 618 0012 0A21     		movs	r1, #10
 619 0014 2000     		movs	r0, r4
 620 0016 FFF7FEFF 		bl	__aeabi_uidivmod
 621              	.LVL41:
 622 001a 0A4B     		ldr	r3, .L20+8
 623 001c 1970     		strb	r1, [r3]
 150:Src/main.c    ****   digit4 = seconds % 10;
 624              		.loc 1 150 0
 625 001e 0A4B     		ldr	r3, .L20+12
 626 0020 1C78     		ldrb	r4, [r3]
ARM GAS  /tmp/ccFQaBtv.s 			page 23


 627 0022 0A21     		movs	r1, #10
 628 0024 2000     		movs	r0, r4
 629 0026 FFF7FEFF 		bl	__aeabi_uidiv
 630              	.LVL42:
 631 002a 084B     		ldr	r3, .L20+16
 632 002c 1870     		strb	r0, [r3]
 151:Src/main.c    **** }
 633              		.loc 1 151 0
 634 002e 0A21     		movs	r1, #10
 635 0030 2000     		movs	r0, r4
 636 0032 FFF7FEFF 		bl	__aeabi_uidivmod
 637              	.LVL43:
 638 0036 064B     		ldr	r3, .L20+20
 639 0038 1970     		strb	r1, [r3]
 152:Src/main.c    **** 
 640              		.loc 1 152 0
 641              		@ sp needed
 642 003a 10BD     		pop	{r4, pc}
 643              	.L21:
 644              		.align	2
 645              	.L20:
 646 003c 00000000 		.word	.LANCHOR0
 647 0040 00000000 		.word	.LANCHOR1
 648 0044 00000000 		.word	.LANCHOR2
 649 0048 00000000 		.word	.LANCHOR3
 650 004c 00000000 		.word	.LANCHOR4
 651 0050 00000000 		.word	.LANCHOR5
 652              		.cfi_endproc
 653              	.LFE39:
 655              		.section	.text.second_tick,"ax",%progbits
 656              		.align	1
 657              		.global	second_tick
 658              		.syntax unified
 659              		.code	16
 660              		.thumb_func
 661              		.fpu softvfp
 663              	second_tick:
 664              	.LFB40:
 156:Src/main.c    ****     if (running) {
 665              		.loc 1 156 0
 666              		.cfi_startproc
 667              		@ args = 0, pretend = 0, frame = 0
 668              		@ frame_needed = 0, uses_anonymous_args = 0
 669 0000 10B5     		push	{r4, lr}
 670              	.LCFI13:
 671              		.cfi_def_cfa_offset 8
 672              		.cfi_offset 4, -8
 673              		.cfi_offset 14, -4
 157:Src/main.c    ****       if (seconds == 0 && minutes == 0){}
 674              		.loc 1 157 0
 675 0002 0E4B     		ldr	r3, .L27
 676 0004 1B78     		ldrb	r3, [r3]
 677 0006 002B     		cmp	r3, #0
 678 0008 12D0     		beq	.L22
 158:Src/main.c    ****       else if (seconds == 0) {
 679              		.loc 1 158 0
 680 000a 0D4B     		ldr	r3, .L27+4
ARM GAS  /tmp/ccFQaBtv.s 			page 24


 681 000c 1B78     		ldrb	r3, [r3]
 682 000e 002B     		cmp	r3, #0
 683 0010 03D1     		bne	.L24
 158:Src/main.c    ****       else if (seconds == 0) {
 684              		.loc 1 158 0 is_stmt 0 discriminator 1
 685 0012 0C4A     		ldr	r2, .L27+8
 686 0014 1278     		ldrb	r2, [r2]
 687 0016 002A     		cmp	r2, #0
 688 0018 08D0     		beq	.L25
 689              	.L24:
 159:Src/main.c    ****         minutes--;
 690              		.loc 1 159 0 is_stmt 1
 691 001a 002B     		cmp	r3, #0
 692 001c 09D1     		bne	.L26
 160:Src/main.c    ****         seconds = 59;
 693              		.loc 1 160 0
 694 001e 094A     		ldr	r2, .L27+8
 695 0020 1378     		ldrb	r3, [r2]
 696 0022 013B     		subs	r3, r3, #1
 697 0024 1370     		strb	r3, [r2]
 161:Src/main.c    ****       }
 698              		.loc 1 161 0
 699 0026 064B     		ldr	r3, .L27+4
 700 0028 3B22     		movs	r2, #59
 701 002a 1A70     		strb	r2, [r3]
 702              	.L25:
 166:Src/main.c    ****     }
 703              		.loc 1 166 0
 704 002c FFF7FEFF 		bl	update_time
 705              	.LVL44:
 706              	.L22:
 168:Src/main.c    **** 
 707              		.loc 1 168 0
 708              		@ sp needed
 709 0030 10BD     		pop	{r4, pc}
 710              	.L26:
 164:Src/main.c    ****       
 711              		.loc 1 164 0
 712 0032 013B     		subs	r3, r3, #1
 713 0034 024A     		ldr	r2, .L27+4
 714 0036 1370     		strb	r3, [r2]
 715 0038 F8E7     		b	.L25
 716              	.L28:
 717 003a C046     		.align	2
 718              	.L27:
 719 003c 00000000 		.word	.LANCHOR6
 720 0040 00000000 		.word	.LANCHOR3
 721 0044 00000000 		.word	.LANCHOR0
 722              		.cfi_endproc
 723              	.LFE40:
 725              		.section	.text.pixel,"ax",%progbits
 726              		.align	1
 727              		.global	pixel
 728              		.syntax unified
 729              		.code	16
 730              		.thumb_func
 731              		.fpu softvfp
ARM GAS  /tmp/ccFQaBtv.s 			page 25


 733              	pixel:
 734              	.LFB41:
 170:Src/main.c    ****   
 735              		.loc 1 170 0
 736              		.cfi_startproc
 737              		@ args = 0, pretend = 0, frame = 0
 738              		@ frame_needed = 0, uses_anonymous_args = 0
 739 0000 70B5     		push	{r4, r5, r6, lr}
 740              	.LCFI14:
 741              		.cfi_def_cfa_offset 16
 742              		.cfi_offset 4, -16
 743              		.cfi_offset 5, -12
 744              		.cfi_offset 6, -8
 745              		.cfi_offset 14, -4
 746              	.LVL45:
 177:Src/main.c    ****     symbol = 0x00; // Nothing when x=8
 747              		.loc 1 177 0
 748 0002 2C4B     		ldr	r3, .L41
 749 0004 1878     		ldrb	r0, [r3]
 750 0006 0828     		cmp	r0, #8
 751 0008 1FD0     		beq	.L39
 180:Src/main.c    ****     symbol = 0x0f0f0; // Colon when x=9
 752              		.loc 1 180 0
 753 000a 0928     		cmp	r0, #9
 754 000c 4DD0     		beq	.L40
 183:Src/main.c    ****   {
 755              		.loc 1 183 0
 756 000e 0328     		cmp	r0, #3
 757 0010 05D8     		bhi	.L31
 185:Src/main.c    ****   }
 758              		.loc 1 185 0
 759 0012 294B     		ldr	r3, .L41+4
 760 0014 1B78     		ldrb	r3, [r3]
 761 0016 9B00     		lsls	r3, r3, #2
 762 0018 284A     		ldr	r2, .L41+8
 763 001a 9C58     		ldr	r4, [r3, r2]
 764              	.LVL46:
 765 001c 16E0     		b	.L30
 766              	.LVL47:
 767              	.L31:
 187:Src/main.c    ****     symbol = symbols[digit2];
 768              		.loc 1 187 0
 769 001e 0728     		cmp	r0, #7
 770 0020 05D8     		bhi	.L32
 188:Src/main.c    ****   }
 771              		.loc 1 188 0
 772 0022 274B     		ldr	r3, .L41+12
 773 0024 1B78     		ldrb	r3, [r3]
 774 0026 9B00     		lsls	r3, r3, #2
 775 0028 244A     		ldr	r2, .L41+8
 776 002a 9C58     		ldr	r4, [r3, r2]
 777              	.LVL48:
 778 002c 0EE0     		b	.L30
 779              	.LVL49:
 780              	.L32:
 190:Src/main.c    ****     symbol = symbols[digit3];
 781              		.loc 1 190 0
ARM GAS  /tmp/ccFQaBtv.s 			page 26


 782 002e 0D28     		cmp	r0, #13
 783 0030 05D8     		bhi	.L33
 191:Src/main.c    ****   }
 784              		.loc 1 191 0
 785 0032 244B     		ldr	r3, .L41+16
 786 0034 1B78     		ldrb	r3, [r3]
 787 0036 9B00     		lsls	r3, r3, #2
 788 0038 204A     		ldr	r2, .L41+8
 789 003a 9C58     		ldr	r4, [r3, r2]
 790              	.LVL50:
 791 003c 06E0     		b	.L30
 792              	.LVL51:
 793              	.L33:
 194:Src/main.c    ****   }
 794              		.loc 1 194 0
 795 003e 224B     		ldr	r3, .L41+20
 796 0040 1B78     		ldrb	r3, [r3]
 797 0042 9B00     		lsls	r3, r3, #2
 798 0044 1D4A     		ldr	r2, .L41+8
 799 0046 9C58     		ldr	r4, [r3, r2]
 800              	.LVL52:
 801 0048 00E0     		b	.L30
 802              	.LVL53:
 803              	.L39:
 178:Src/main.c    ****   }
 804              		.loc 1 178 0
 805 004a 0024     		movs	r4, #0
 806              	.LVL54:
 807              	.L30:
 198:Src/main.c    ****   if (x > 9)
 808              		.loc 1 198 0
 809 004c 0323     		movs	r3, #3
 810 004e 0340     		ands	r3, r0
 811 0050 1E4A     		ldr	r2, .L41+24
 812 0052 1178     		ldrb	r1, [r2]
 813 0054 8A00     		lsls	r2, r1, #2
 814 0056 D2B2     		uxtb	r2, r2
 815 0058 9B18     		adds	r3, r3, r2
 816 005a DBB2     		uxtb	r3, r3
 817              	.LVL55:
 199:Src/main.c    ****     position = ((x-2)%4) + 4*y;
 818              		.loc 1 199 0
 819 005c 0928     		cmp	r0, #9
 820 005e 09D9     		bls	.L34
 200:Src/main.c    ****     
 821              		.loc 1 200 0
 822 0060 861E     		subs	r6, r0, #2
 823 0062 F517     		asrs	r5, r6, #31
 824 0064 AD0F     		lsrs	r5, r5, #30
 825 0066 7619     		adds	r6, r6, r5
 826 0068 0323     		movs	r3, #3
 827              	.LVL56:
 828 006a 3340     		ands	r3, r6
 829              	.LVL57:
 830 006c 5B1B     		subs	r3, r3, r5
 831 006e DBB2     		uxtb	r3, r3
 832 0070 D318     		adds	r3, r2, r3
ARM GAS  /tmp/ccFQaBtv.s 			page 27


 833 0072 DBB2     		uxtb	r3, r3
 834              	.LVL58:
 835              	.L34:
 203:Src/main.c    ****     set_led(x, y);
 836              		.loc 1 203 0
 837 0074 0122     		movs	r2, #1
 838 0076 9A40     		lsls	r2, r2, r3
 839 0078 1442     		tst	r4, r2
 840 007a 18D0     		beq	.L35
 204:Src/main.c    ****   else
 841              		.loc 1 204 0
 842 007c FFF7FEFF 		bl	set_led
 843              	.LVL59:
 844              	.L36:
 209:Src/main.c    ****   y++;
 845              		.loc 1 209 0
 846 0080 0C4B     		ldr	r3, .L41
 847 0082 1A78     		ldrb	r2, [r3]
 848 0084 0132     		adds	r2, r2, #1
 849 0086 D2B2     		uxtb	r2, r2
 850 0088 1A70     		strb	r2, [r3]
 210:Src/main.c    ****   
 851              		.loc 1 210 0
 852 008a 1049     		ldr	r1, .L41+24
 853 008c 0B78     		ldrb	r3, [r1]
 854 008e 0133     		adds	r3, r3, #1
 855 0090 DBB2     		uxtb	r3, r3
 856 0092 0B70     		strb	r3, [r1]
 213:Src/main.c    ****       x = 0;
 857              		.loc 1 213 0
 858 0094 112A     		cmp	r2, #17
 859 0096 02D9     		bls	.L37
 214:Src/main.c    ****   if(y > 4)
 860              		.loc 1 214 0
 861 0098 064A     		ldr	r2, .L41
 862 009a 0021     		movs	r1, #0
 863 009c 1170     		strb	r1, [r2]
 864              	.L37:
 215:Src/main.c    ****       y = 0;
 865              		.loc 1 215 0
 866 009e 042B     		cmp	r3, #4
 867 00a0 02D9     		bls	.L29
 216:Src/main.c    **** }
 868              		.loc 1 216 0
 869 00a2 0A4B     		ldr	r3, .L41+24
 870 00a4 0022     		movs	r2, #0
 871 00a6 1A70     		strb	r2, [r3]
 872              	.L29:
 217:Src/main.c    **** 
 873              		.loc 1 217 0
 874              		@ sp needed
 875              	.LVL60:
 876 00a8 70BD     		pop	{r4, r5, r6, pc}
 877              	.LVL61:
 878              	.L40:
 181:Src/main.c    ****   }
 879              		.loc 1 181 0
ARM GAS  /tmp/ccFQaBtv.s 			page 28


 880 00aa 094C     		ldr	r4, .L41+28
 881 00ac CEE7     		b	.L30
 882              	.LVL62:
 883              	.L35:
 206:Src/main.c    ****   
 884              		.loc 1 206 0
 885 00ae FFF7FEFF 		bl	clear_leds
 886              	.LVL63:
 887 00b2 E5E7     		b	.L36
 888              	.L42:
 889              		.align	2
 890              	.L41:
 891 00b4 00000000 		.word	.LANCHOR7
 892 00b8 00000000 		.word	.LANCHOR1
 893 00bc 00000000 		.word	.LANCHOR8
 894 00c0 00000000 		.word	.LANCHOR2
 895 00c4 00000000 		.word	.LANCHOR4
 896 00c8 00000000 		.word	.LANCHOR5
 897 00cc 00000000 		.word	.LANCHOR9
 898 00d0 F0F00000 		.word	61680
 899              		.cfi_endproc
 900              	.LFE41:
 902              		.section	.text.SystemClock_Config,"ax",%progbits
 903              		.align	1
 904              		.global	SystemClock_Config
 905              		.syntax unified
 906              		.code	16
 907              		.thumb_func
 908              		.fpu softvfp
 910              	SystemClock_Config:
 911              	.LFB43:
 328:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 912              		.loc 1 328 0
 913              		.cfi_startproc
 914              		@ args = 0, pretend = 0, frame = 64
 915              		@ frame_needed = 0, uses_anonymous_args = 0
 916 0000 10B5     		push	{r4, lr}
 917              	.LCFI15:
 918              		.cfi_def_cfa_offset 8
 919              		.cfi_offset 4, -8
 920              		.cfi_offset 14, -4
 921 0002 90B0     		sub	sp, sp, #64
 922              	.LCFI16:
 923              		.cfi_def_cfa_offset 72
 329:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 924              		.loc 1 329 0
 925 0004 2822     		movs	r2, #40
 926 0006 0021     		movs	r1, #0
 927 0008 06A8     		add	r0, sp, #24
 928 000a FFF7FEFF 		bl	memset
 929              	.LVL64:
 330:Src/main.c    **** 
 930              		.loc 1 330 0
 931 000e 1022     		movs	r2, #16
 932 0010 0021     		movs	r1, #0
 933 0012 6846     		mov	r0, sp
 934 0014 FFF7FEFF 		bl	memset
ARM GAS  /tmp/ccFQaBtv.s 			page 29


 935              	.LVL65:
 334:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 936              		.loc 1 334 0
 937 0018 0123     		movs	r3, #1
 938 001a 0493     		str	r3, [sp, #16]
 335:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 939              		.loc 1 335 0
 940 001c 0593     		str	r3, [sp, #20]
 336:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 941              		.loc 1 336 0
 942 001e 0224     		movs	r4, #2
 943 0020 0C94     		str	r4, [sp, #48]
 337:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 944              		.loc 1 337 0
 945 0022 8023     		movs	r3, #128
 946 0024 5B02     		lsls	r3, r3, #9
 947 0026 0D93     		str	r3, [sp, #52]
 338:Src/main.c    ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 948              		.loc 1 338 0
 949 0028 8023     		movs	r3, #128
 950 002a 5B03     		lsls	r3, r3, #13
 951 002c 0E93     		str	r3, [sp, #56]
 340:Src/main.c    ****   {
 952              		.loc 1 340 0
 953 002e 04A8     		add	r0, sp, #16
 954 0030 FFF7FEFF 		bl	HAL_RCC_OscConfig
 955              	.LVL66:
 346:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 956              		.loc 1 346 0
 957 0034 0723     		movs	r3, #7
 958 0036 0093     		str	r3, [sp]
 348:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 959              		.loc 1 348 0
 960 0038 0194     		str	r4, [sp, #4]
 349:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 961              		.loc 1 349 0
 962 003a 0023     		movs	r3, #0
 963 003c 0293     		str	r3, [sp, #8]
 350:Src/main.c    **** 
 964              		.loc 1 350 0
 965 003e 0393     		str	r3, [sp, #12]
 352:Src/main.c    ****   {
 966              		.loc 1 352 0
 967 0040 0121     		movs	r1, #1
 968 0042 6846     		mov	r0, sp
 969 0044 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 970              	.LVL67:
 356:Src/main.c    **** 
 971              		.loc 1 356 0
 972 0048 10B0     		add	sp, sp, #64
 973              		@ sp needed
 974 004a 10BD     		pop	{r4, pc}
 975              		.cfi_endproc
 976              	.LFE43:
 978              		.section	.text.main,"ax",%progbits
 979              		.align	1
 980              		.global	main
ARM GAS  /tmp/ccFQaBtv.s 			page 30


 981              		.syntax unified
 982              		.code	16
 983              		.thumb_func
 984              		.fpu softvfp
 986              	main:
 987              	.LFB42:
 227:Src/main.c    ****   /* USER CODE BEGIN 1 */
 988              		.loc 1 227 0
 989              		.cfi_startproc
 990              		@ Volatile: function does not return.
 991              		@ args = 0, pretend = 0, frame = 0
 992              		@ frame_needed = 0, uses_anonymous_args = 0
 993 0000 10B5     		push	{r4, lr}
 994              	.LCFI17:
 995              		.cfi_def_cfa_offset 8
 996              		.cfi_offset 4, -8
 997              		.cfi_offset 14, -4
 235:Src/main.c    **** 
 998              		.loc 1 235 0
 999 0002 FFF7FEFF 		bl	HAL_Init
 1000              	.LVL68:
 242:Src/main.c    **** 
 1001              		.loc 1 242 0
 1002 0006 FFF7FEFF 		bl	SystemClock_Config
 1003              	.LVL69:
 249:Src/main.c    ****   MX_TIM3_Init();
 1004              		.loc 1 249 0
 1005 000a FFF7FEFF 		bl	MX_GPIO_Init
 1006              	.LVL70:
 250:Src/main.c    ****   MX_TIM14_Init();
 1007              		.loc 1 250 0
 1008 000e FFF7FEFF 		bl	MX_TIM3_Init
 1009              	.LVL71:
 251:Src/main.c    ****   MX_TIM16_Init();
 1010              		.loc 1 251 0
 1011 0012 FFF7FEFF 		bl	MX_TIM14_Init
 1012              	.LVL72:
 252:Src/main.c    ****   /* USER CODE BEGIN 2 */
 1013              		.loc 1 252 0
 1014 0016 FFF7FEFF 		bl	MX_TIM16_Init
 1015              	.LVL73:
 255:Src/main.c    ****   HAL_TIM_Base_Start_IT(&htim14);
 1016              		.loc 1 255 0
 1017 001a 3C48     		ldr	r0, .L61
 1018 001c FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1019              	.LVL74:
 256:Src/main.c    ****   HAL_TIM_Base_Start_IT(&htim16);
 1020              		.loc 1 256 0
 1021 0020 3B48     		ldr	r0, .L61+4
 1022 0022 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1023              	.LVL75:
 257:Src/main.c    ****   
 1024              		.loc 1 257 0
 1025 0026 3B48     		ldr	r0, .L61+8
 1026 0028 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1027              	.LVL76:
 1028 002c 4CE0     		b	.L45
ARM GAS  /tmp/ccFQaBtv.s 			page 31


 1029              	.L58:
 271:Src/main.c    ****         running = 1;
 1030              		.loc 1 271 0
 1031 002e 3A4B     		ldr	r3, .L61+12
 1032 0030 1B78     		ldrb	r3, [r3]
 1033 0032 002B     		cmp	r3, #0
 1034 0034 0FD1     		bne	.L47
 272:Src/main.c    ****       else
 1035              		.loc 1 272 0
 1036 0036 384B     		ldr	r3, .L61+12
 1037 0038 0122     		movs	r2, #1
 1038 003a 1A70     		strb	r2, [r3]
 1039              	.L48:
 276:Src/main.c    ****       while (HAL_GPIO_ReadPin(GPIOB, SW1_Pin)==0) {}
 1040              		.loc 1 276 0
 1041 003c 0A20     		movs	r0, #10
 1042 003e FFF7FEFF 		bl	HAL_Delay
 1043              	.LVL77:
 1044              	.L49:
 277:Src/main.c    ****       HAL_Delay(10);
 1045              		.loc 1 277 0 discriminator 1
 1046 0042 0221     		movs	r1, #2
 1047 0044 3548     		ldr	r0, .L61+16
 1048 0046 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1049              	.LVL78:
 1050 004a 0028     		cmp	r0, #0
 1051 004c F9D0     		beq	.L49
 278:Src/main.c    ****     }
 1052              		.loc 1 278 0
 1053 004e 0A20     		movs	r0, #10
 1054 0050 FFF7FEFF 		bl	HAL_Delay
 1055              	.LVL79:
 1056 0054 3EE0     		b	.L46
 1057              	.L47:
 274:Src/main.c    ****  
 1058              		.loc 1 274 0
 1059 0056 304B     		ldr	r3, .L61+12
 1060 0058 0022     		movs	r2, #0
 1061 005a 1A70     		strb	r2, [r3]
 1062 005c EEE7     		b	.L48
 1063              	.L59:
 284:Src/main.c    ****         if (minutes > 99)
 1064              		.loc 1 284 0
 1065 005e 304A     		ldr	r2, .L61+20
 1066 0060 1378     		ldrb	r3, [r2]
 1067 0062 0133     		adds	r3, r3, #1
 1068 0064 DBB2     		uxtb	r3, r3
 1069 0066 1370     		strb	r3, [r2]
 285:Src/main.c    ****           minutes = 0;
 1070              		.loc 1 285 0
 1071 0068 632B     		cmp	r3, #99
 1072 006a 02D9     		bls	.L51
 286:Src/main.c    ****         
 1073              		.loc 1 286 0
 1074 006c 1300     		movs	r3, r2
 1075 006e 0022     		movs	r2, #0
 1076 0070 1A70     		strb	r2, [r3]
ARM GAS  /tmp/ccFQaBtv.s 			page 32


 1077              	.L51:
 288:Src/main.c    ****         
 1078              		.loc 1 288 0
 1079 0072 FFF7FEFF 		bl	update_time
 1080              	.LVL80:
 290:Src/main.c    ****         while (HAL_GPIO_ReadPin(GPIOB, SW2_Pin)==0) {}
 1081              		.loc 1 290 0
 1082 0076 0A20     		movs	r0, #10
 1083 0078 FFF7FEFF 		bl	HAL_Delay
 1084              	.LVL81:
 1085              	.L52:
 291:Src/main.c    ****         HAL_Delay(10);
 1086              		.loc 1 291 0 discriminator 1
 1087 007c 0121     		movs	r1, #1
 1088 007e 2748     		ldr	r0, .L61+16
 1089 0080 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1090              	.LVL82:
 1091 0084 0028     		cmp	r0, #0
 1092 0086 F9D0     		beq	.L52
 292:Src/main.c    ****     }
 1093              		.loc 1 292 0
 1094 0088 0A20     		movs	r0, #10
 1095 008a FFF7FEFF 		bl	HAL_Delay
 1096              	.LVL83:
 1097 008e 27E0     		b	.L50
 1098              	.L60:
 298:Src/main.c    ****         if (seconds > 99)
 1099              		.loc 1 298 0
 1100 0090 244A     		ldr	r2, .L61+24
 1101 0092 1378     		ldrb	r3, [r2]
 1102 0094 0133     		adds	r3, r3, #1
 1103 0096 DBB2     		uxtb	r3, r3
 1104 0098 1370     		strb	r3, [r2]
 299:Src/main.c    ****           seconds = 0;
 1105              		.loc 1 299 0
 1106 009a 632B     		cmp	r3, #99
 1107 009c 02D9     		bls	.L54
 300:Src/main.c    ****         
 1108              		.loc 1 300 0
 1109 009e 1300     		movs	r3, r2
 1110 00a0 0022     		movs	r2, #0
 1111 00a2 1A70     		strb	r2, [r3]
 1112              	.L54:
 302:Src/main.c    ****         
 1113              		.loc 1 302 0
 1114 00a4 FFF7FEFF 		bl	update_time
 1115              	.LVL84:
 304:Src/main.c    ****         while (HAL_GPIO_ReadPin(GPIOB, SW3_Pin)==0) {}
 1116              		.loc 1 304 0
 1117 00a8 0A20     		movs	r0, #10
 1118 00aa FFF7FEFF 		bl	HAL_Delay
 1119              	.LVL85:
 1120              	.L55:
 305:Src/main.c    ****         HAL_Delay(10);
 1121              		.loc 1 305 0 discriminator 1
 1122 00ae 0421     		movs	r1, #4
 1123 00b0 1A48     		ldr	r0, .L61+16
ARM GAS  /tmp/ccFQaBtv.s 			page 33


 1124 00b2 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1125              	.LVL86:
 1126 00b6 0028     		cmp	r0, #0
 1127 00b8 F9D0     		beq	.L55
 306:Src/main.c    ****     }
 1128              		.loc 1 306 0
 1129 00ba 0A20     		movs	r0, #10
 1130 00bc FFF7FEFF 		bl	HAL_Delay
 1131              	.LVL87:
 1132 00c0 14E0     		b	.L53
 1133              	.L56:
 316:Src/main.c    ****     }
 1134              		.loc 1 316 0
 1135 00c2 194B     		ldr	r3, .L61+28
 1136 00c4 0022     		movs	r2, #0
 1137 00c6 1A70     		strb	r2, [r3]
 1138              	.L45:
 269:Src/main.c    ****     {
 1139              		.loc 1 269 0
 1140 00c8 0221     		movs	r1, #2
 1141 00ca 1448     		ldr	r0, .L61+16
 1142 00cc FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1143              	.LVL88:
 1144 00d0 0028     		cmp	r0, #0
 1145 00d2 ACD0     		beq	.L58
 1146              	.L46:
 281:Src/main.c    ****     {
 1147              		.loc 1 281 0
 1148 00d4 0121     		movs	r1, #1
 1149 00d6 1148     		ldr	r0, .L61+16
 1150 00d8 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1151              	.LVL89:
 1152 00dc 0028     		cmp	r0, #0
 1153 00de BED0     		beq	.L59
 1154              	.L50:
 295:Src/main.c    ****     {
 1155              		.loc 1 295 0
 1156 00e0 0421     		movs	r1, #4
 1157 00e2 0E48     		ldr	r0, .L61+16
 1158 00e4 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1159              	.LVL90:
 1160 00e8 0028     		cmp	r0, #0
 1161 00ea D1D0     		beq	.L60
 1162              	.L53:
 310:Src/main.c    ****       if(seconds == 0 && minutes == 0) {
 1163              		.loc 1 310 0
 1164 00ec 0A4B     		ldr	r3, .L61+12
 1165 00ee 1B78     		ldrb	r3, [r3]
 1166 00f0 002B     		cmp	r3, #0
 1167 00f2 E6D0     		beq	.L56
 311:Src/main.c    ****           allow_buzzer = 1;
 1168              		.loc 1 311 0
 1169 00f4 0B4B     		ldr	r3, .L61+24
 1170 00f6 1B78     		ldrb	r3, [r3]
 1171 00f8 002B     		cmp	r3, #0
 1172 00fa E5D1     		bne	.L45
 311:Src/main.c    ****           allow_buzzer = 1;
ARM GAS  /tmp/ccFQaBtv.s 			page 34


 1173              		.loc 1 311 0 is_stmt 0 discriminator 1
 1174 00fc 084B     		ldr	r3, .L61+20
 1175 00fe 1B78     		ldrb	r3, [r3]
 1176 0100 002B     		cmp	r3, #0
 1177 0102 E1D1     		bne	.L45
 312:Src/main.c    ****       }              
 1178              		.loc 1 312 0 is_stmt 1
 1179 0104 084B     		ldr	r3, .L61+28
 1180 0106 0122     		movs	r2, #1
 1181 0108 1A70     		strb	r2, [r3]
 1182 010a DDE7     		b	.L45
 1183              	.L62:
 1184              		.align	2
 1185              	.L61:
 1186 010c 00000000 		.word	htim3
 1187 0110 00000000 		.word	htim14
 1188 0114 00000000 		.word	htim16
 1189 0118 00000000 		.word	.LANCHOR6
 1190 011c 00040048 		.word	1207960576
 1191 0120 00000000 		.word	.LANCHOR0
 1192 0124 00000000 		.word	.LANCHOR3
 1193 0128 00000000 		.word	allow_buzzer
 1194              		.cfi_endproc
 1195              	.LFE42:
 1197              		.section	.text.Error_Handler,"ax",%progbits
 1198              		.align	1
 1199              		.global	Error_Handler
 1200              		.syntax unified
 1201              		.code	16
 1202              		.thumb_func
 1203              		.fpu softvfp
 1205              	Error_Handler:
 1206              	.LFB48:
 556:Src/main.c    **** 
 557:Src/main.c    **** /* USER CODE BEGIN 4 */
 558:Src/main.c    **** 
 559:Src/main.c    **** /* USER CODE END 4 */
 560:Src/main.c    **** 
 561:Src/main.c    **** /**
 562:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 563:Src/main.c    ****   * @retval None
 564:Src/main.c    ****   */
 565:Src/main.c    **** void Error_Handler(void)
 566:Src/main.c    **** {
 1207              		.loc 1 566 0
 1208              		.cfi_startproc
 1209              		@ args = 0, pretend = 0, frame = 0
 1210              		@ frame_needed = 0, uses_anonymous_args = 0
 1211              		@ link register save eliminated.
 567:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 568:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 569:Src/main.c    **** 
 570:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
 571:Src/main.c    **** }
 1212              		.loc 1 571 0
 1213              		@ sp needed
 1214 0000 7047     		bx	lr
ARM GAS  /tmp/ccFQaBtv.s 			page 35


 1215              		.cfi_endproc
 1216              	.LFE48:
 1218              		.global	seconds
 1219              		.global	minutes
 1220              		.global	digit4
 1221              		.global	digit3
 1222              		.global	digit2
 1223              		.global	digit1
 1224              		.global	running
 1225              		.global	symbols
 1226              		.comm	htim16,64,4
 1227              		.comm	htim14,64,4
 1228              		.comm	htim3,64,4
 1229              		.comm	allow_buzzer,1,1
 1230              		.section	.bss.digit1,"aw",%nobits
 1231              		.set	.LANCHOR1,. + 0
 1234              	digit1:
 1235 0000 00       		.space	1
 1236              		.section	.bss.digit2,"aw",%nobits
 1237              		.set	.LANCHOR2,. + 0
 1240              	digit2:
 1241 0000 00       		.space	1
 1242              		.section	.bss.digit3,"aw",%nobits
 1243              		.set	.LANCHOR4,. + 0
 1246              	digit3:
 1247 0000 00       		.space	1
 1248              		.section	.bss.digit4,"aw",%nobits
 1249              		.set	.LANCHOR5,. + 0
 1252              	digit4:
 1253 0000 00       		.space	1
 1254              		.section	.bss.minutes,"aw",%nobits
 1255              		.set	.LANCHOR0,. + 0
 1258              	minutes:
 1259 0000 00       		.space	1
 1260              		.section	.bss.running,"aw",%nobits
 1261              		.set	.LANCHOR6,. + 0
 1264              	running:
 1265 0000 00       		.space	1
 1266              		.section	.bss.seconds,"aw",%nobits
 1267              		.set	.LANCHOR3,. + 0
 1270              	seconds:
 1271 0000 00       		.space	1
 1272              		.section	.bss.x.6760,"aw",%nobits
 1273              		.set	.LANCHOR7,. + 0
 1276              	x.6760:
 1277 0000 00       		.space	1
 1278              		.section	.bss.y.6761,"aw",%nobits
 1279              		.set	.LANCHOR9,. + 0
 1282              	y.6761:
 1283 0000 00       		.space	1
 1284              		.section	.rodata.symbols,"a",%progbits
 1285              		.align	2
 1286              		.set	.LANCHOR8,. + 0
 1289              	symbols:
 1290 0000 AEAA0E00 		.word	961198
 1291 0004 64440E00 		.word	935012
 1292 0008 8E2E0E00 		.word	929422
ARM GAS  /tmp/ccFQaBtv.s 			page 36


 1293 000c 8E8E0E00 		.word	953998
 1294 0010 AA8E0800 		.word	560810
 1295 0014 2E8E0E00 		.word	953902
 1296 0018 2EAE0E00 		.word	962094
 1297 001c 8E880800 		.word	559246
 1298 0020 AEAE0E00 		.word	962222
 1299 0024 AE8E0800 		.word	560814
 1300              		.text
 1301              	.Letext0:
 1302              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1303              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1304              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 1305              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f070x6.h"
 1306              		.file 6 "/usr/arm-none-eabi/include/sys/lock.h"
 1307              		.file 7 "/usr/arm-none-eabi/include/sys/_types.h"
 1308              		.file 8 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 1309              		.file 9 "/usr/arm-none-eabi/include/sys/reent.h"
 1310              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 1311              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 1312              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 1313              		.file 13 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 1314              		.file 14 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 1315              		.file 15 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim_ex.h"
 1316              		.file 16 "Inc/main.h"
 1317              		.file 17 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 1318              		.file 18 "<built-in>"
ARM GAS  /tmp/ccFQaBtv.s 			page 37


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccFQaBtv.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccFQaBtv.s:22     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccFQaBtv.s:148    .text.MX_GPIO_Init:00000000000000a0 $d
     /tmp/ccFQaBtv.s:155    .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/ccFQaBtv.s:161    .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/ccFQaBtv.s:236    .text.MX_TIM3_Init:0000000000000058 $d
                            *COM*:0000000000000040 htim3
     /tmp/ccFQaBtv.s:242    .text.MX_TIM14_Init:0000000000000000 $t
     /tmp/ccFQaBtv.s:248    .text.MX_TIM14_Init:0000000000000000 MX_TIM14_Init
     /tmp/ccFQaBtv.s:316    .text.MX_TIM14_Init:0000000000000048 $d
                            *COM*:0000000000000040 htim14
     /tmp/ccFQaBtv.s:323    .text.MX_TIM16_Init:0000000000000000 $t
     /tmp/ccFQaBtv.s:329    .text.MX_TIM16_Init:0000000000000000 MX_TIM16_Init
     /tmp/ccFQaBtv.s:432    .text.MX_TIM16_Init:0000000000000074 $d
                            *COM*:0000000000000040 htim16
     /tmp/ccFQaBtv.s:439    .text.clear_leds:0000000000000000 $t
     /tmp/ccFQaBtv.s:446    .text.clear_leds:0000000000000000 clear_leds
     /tmp/ccFQaBtv.s:481    .text.clear_leds:0000000000000020 $d
     /tmp/ccFQaBtv.s:486    .text.set_led:0000000000000000 $t
     /tmp/ccFQaBtv.s:493    .text.set_led:0000000000000000 set_led
     /tmp/ccFQaBtv.s:590    .text.update_time:0000000000000000 $t
     /tmp/ccFQaBtv.s:597    .text.update_time:0000000000000000 update_time
     /tmp/ccFQaBtv.s:646    .text.update_time:000000000000003c $d
     /tmp/ccFQaBtv.s:656    .text.second_tick:0000000000000000 $t
     /tmp/ccFQaBtv.s:663    .text.second_tick:0000000000000000 second_tick
     /tmp/ccFQaBtv.s:719    .text.second_tick:000000000000003c $d
     /tmp/ccFQaBtv.s:726    .text.pixel:0000000000000000 $t
     /tmp/ccFQaBtv.s:733    .text.pixel:0000000000000000 pixel
     /tmp/ccFQaBtv.s:891    .text.pixel:00000000000000b4 $d
     /tmp/ccFQaBtv.s:903    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccFQaBtv.s:910    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccFQaBtv.s:979    .text.main:0000000000000000 $t
     /tmp/ccFQaBtv.s:986    .text.main:0000000000000000 main
     /tmp/ccFQaBtv.s:1186   .text.main:000000000000010c $d
                            *COM*:0000000000000001 allow_buzzer
     /tmp/ccFQaBtv.s:1198   .text.Error_Handler:0000000000000000 $t
     /tmp/ccFQaBtv.s:1205   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccFQaBtv.s:1270   .bss.seconds:0000000000000000 seconds
     /tmp/ccFQaBtv.s:1258   .bss.minutes:0000000000000000 minutes
     /tmp/ccFQaBtv.s:1252   .bss.digit4:0000000000000000 digit4
     /tmp/ccFQaBtv.s:1246   .bss.digit3:0000000000000000 digit3
     /tmp/ccFQaBtv.s:1240   .bss.digit2:0000000000000000 digit2
     /tmp/ccFQaBtv.s:1234   .bss.digit1:0000000000000000 digit1
     /tmp/ccFQaBtv.s:1264   .bss.running:0000000000000000 running
     /tmp/ccFQaBtv.s:1289   .rodata.symbols:0000000000000000 symbols
     /tmp/ccFQaBtv.s:1235   .bss.digit1:0000000000000000 $d
     /tmp/ccFQaBtv.s:1241   .bss.digit2:0000000000000000 $d
     /tmp/ccFQaBtv.s:1247   .bss.digit3:0000000000000000 $d
     /tmp/ccFQaBtv.s:1253   .bss.digit4:0000000000000000 $d
     /tmp/ccFQaBtv.s:1259   .bss.minutes:0000000000000000 $d
     /tmp/ccFQaBtv.s:1265   .bss.running:0000000000000000 $d
     /tmp/ccFQaBtv.s:1271   .bss.seconds:0000000000000000 $d
     /tmp/ccFQaBtv.s:1276   .bss.x.6760:0000000000000000 x.6760
     /tmp/ccFQaBtv.s:1277   .bss.x.6760:0000000000000000 $d
     /tmp/ccFQaBtv.s:1282   .bss.y.6761:0000000000000000 y.6761
ARM GAS  /tmp/ccFQaBtv.s 			page 38


     /tmp/ccFQaBtv.s:1283   .bss.y.6761:0000000000000000 $d
     /tmp/ccFQaBtv.s:1285   .rodata.symbols:0000000000000000 $d

UNDEFINED SYMBOLS
memset
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_Init
HAL_TIM_PWM_ConfigChannel
HAL_TIM_OC_Init
HAL_TIM_OC_ConfigChannel
HAL_TIMEx_ConfigBreakDeadTime
__aeabi_uidiv
__aeabi_uidivmod
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_TIM_Base_Start_IT
HAL_Delay
HAL_GPIO_ReadPin
